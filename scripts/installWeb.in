#!/opt/bin/perl
#
# Install script for Ganymede web resources
#
# Jonathan Abbey - jonabbey@arlut.utexas.edu
#
############################################################

use File::Copy;
use Cwd;

# the following line is fixed up by the configurator script.

$perlloc = "/opt/bin/perl";

# Make sure our current working directory is in the same directory as
# the script

$rootdir = dirname($0);
chdir($rootdir);

# This script needs to get a several pieces of information from
# the user, including:
#
# Where should the web resources be placed?
# What system is the server running on?
# What superuser name is desired?
#
# Everything else can be reasonably derived from the above.

@steps = ("SYSTEMNAME","REGISTRYPORT", "HTMLINSTALL", "DOCS", "ANT", "WEBURL", "XMLPATH");

%vars = ("SYSTEMNAME" => "",
         "REGISTRYPORT" => "1099",
         "HTMLINSTALL" => "/sample/apache/html/ganymede",
         "WEBURL" => "/ganymede",
	 "XMLPATH" => "/ganymede-client/bin",
	 "DOCS" => "yes",
	 "ANT" => "/usr/bin/ant");

%descrip = ("SYSTEMNAME" => "What is the name of the system that the server will run on?",
	    "REGISTRYPORT" => "What port is the RMI registry supporting Ganymede running on?",
            "HTMLINSTALL" => "Where should the web access files be installed?",
            "WEBURL" => "What URL path will resolve to the Ganymede web access directory?",
	    "XMLPATH" => "Where will the Ganymede client binaries be installed?",
	    "DOCS" => "Do you want the Ganymede documentation installed in this directory as well?",
	    "ANT" => "Where is Apache Ant installed?");

removelastslash($vars{"XMLPATH"});

####################

# We don't want to hold back stdout

$| = 1;

print <<ENDINTRO;

Ganymede Web Resources Install Script
--------------------------------------------

ENDINTRO

# Make sure we're running from the right directory

open TEST, "jars/ganymede.jar" or $failure = 1;

if (!$failure) {
  close TEST;
} else {
  print "*error* couldn't find client jar file.  not run from install directory?\n";
  exit;
}

# Read the information from the user

$vars{"SYSTEMNAME"} = `hostname`; # default hostname
chop $vars{"SYSTEMNAME"}; # take off trailing newline

foreach $step (@steps) {

  if ($step eq "ANT" && $vars{"DOCS"} !~ /^y/i) {
    next;
  }

  $success = 0;

  while (!$success) {
    print $descrip{$step};
    print " [$vars{$step}] ";

    $old = $vars{$step};
    $inp = <>;

    chop $inp; # cut off newline

    if ($inp ne "") {
      $vars{$step} = $inp;
    }

    if ($vars{$step}eq "") {
	$success = 0;
	print "*You must provide a value for this field*\n";
    } else {
      $success = 1;
    }

    # If they have given us a web host name, create a default WEBURL
    # that we'll suggest.  The user can change that at a later step.

    if ($step eq "SYSTEMNAME") {
      $vars{"WEBURL"} = "http://" . $vars{"SYSTEMNAME"}."/ganymede";
    }

    if ($step eq "HTMLINSTALL" || $step eq "XMLPATH") {
      $vars{$step} = canonify($vars{$step});

      if ($vars{$step} !~ /^\//) {
	print "*Could not resolve the pathname, please enter a full path.\n";
	$success = 0;
      }
    }

    if ($step eq "REGISTRYPORT") {
	if ($vars{$step} > 65535) {
	    print "*Port numbers must be less than 65536.\n";
	    $vars{$step} = $old;
	    $success = 0;
	}

	if ($vars{$step} <= 0) {
	    print "*Port numbers must be greater than 0.\n";
	    $vars{$step} = $old;
	    $success = 0;
	}
    }

    if ($step eq "WEBURL" && $vars{"WEBURL"} !~ /^https?:\/\//) {
      print "*Please provide a fully qualified URL.\n";
      $success = 0;
    }
  }
}

# Ok, we've got everything

print <<ENDCONFIG;

Testing configuration information

ENDCONFIG

# can we make the client install directory?

$installdir = $vars{"HTMLINSTALL"};

if (!-d $installdir) {
  mkdir($installdir, 0755) or die "*Couldn't make the web resources directory $installdir*\n";
  chmod 0755, $installdir;	# no, we really mean it.. override umask
  print "Made the web resources directory ok\n";
} else {
    if (-e "$installdir/index.html") {
	print "Error, $installdir/index.html already exists.  Please specify a\n";
	print "unique subdirectory for Ganymede's web resources so that this script\n";
	print "can install its own index.html file.\n";
	exit 1;
    }

  print "Found the web resources directory ok\n";
}

print <<ENDOK;

Configuration seems to check out.

Installing web resources into $installdir.

ENDOK

copy_file("jars/ganymede.jar", "$installdir/ganymede.jar");
copy_file("jars/ganymedeAdmin.jar", "$installdir/ganymedeAdmin.jar");
copy_file("webforms/ganymede_title.gif", "$installdir/ganymede_title.gif");
copy_file("webforms/ganymede_title2_sm.gif", "$installdir/ganymede_title2_sm.gif");
copy_file("webforms/arlbw.jpg", "$installdir/arlbw.jpg");
copy_file("webforms/ganymede_128.png", "$installdir/ganymede_128.png");
copy_file("webforms/ganymede_splash.png", "$installdir/ganymede_splash.png");

# Customize and copy the client web pages

install_file("webforms/index.html", "$installdir/index.html");
install_file("webforms/client_native.html", "$installdir/client_native.html");
install_file("webforms/console_native.html", "$installdir/console_native.html");
install_file("webforms/ganypass.pl", "$installdir/ganypass.pl");
install_file("webforms/gany_query.pl", "$installdir/gany_query.pl");
install_file("webforms/client.jnlp", "$installdir/client.jnlp");
install_file("webforms/console.jnlp", "$installdir/console.jnlp");
chmod 0755, "$installdir/ganypass.pl";
chmod 0755, "$installdir/gany_query.pl";

print "\nDone installing web resources\n";

if ($vars{"DOCS"} =~ /^y/i) {

  if ($vars{'WEBURL'} =~ /\/$/) {
    $doc_url = "$vars{'WEBURL'}doc/";
  } else {
    $doc_url = "$vars{'WEBURL'}/doc/";
  }

  print "\n\nInstalling documentation into $installdir/doc.\n";

  if (!-e "$rootdir/doc/javadoc/index.html") {
    chdir("$rootdir/src");
    print "\n\nBuilding Ganymede javadocs.\n\n";
    system($vars{'ANT'}, "javadoc");
    chdir("$rootdir");
  }

  copydir("doc", "$installdir/doc");

  foreach $file ("README", "FAQ", "CHANGES", "CREDITS", "THINGSTODO", "KNOWNBUGS") {
    copy_file($file, "$installdir/$file");
  }

  install_file("webforms/index_doc.html", "$installdir/index.html");

  print "\nDone installing documentation.\nDocumentation is accessible at $doc_url.\n";
}

#########################################################################
#
#                                                         removelastslash
#
# input: a pathname to test
#
# this function will remove a trailing slash from the directory name
# input
#
#########################################################################
sub removelastslash{
  if ($_[0] =~ /\/$/) {
    chop $_[0];
  }

  return $_[0];
}

#########################################################################
#
#                                                               copy_file
#
# input: 1) source file
#        2) target file
#
#########################################################################
sub copy_file{
  my ($source, $target) = @_;

  copy($source, $target);
  chmod 0644, $target;
  print ".";
}

#########################################################################
#
#                                                                 makedir
#
# input: 1) a directory to make
#        2) octal chmod bits
#
#########################################################################
sub makedir{
  my ($dirpath, $chmod) = @_;

  if (!-e $dirpath) {
    mkdir ($dirpath, $chmod) or die("*Couldn't make $dirpath*");
  }
}

#########################################################################
#
#                                                                 copydir
#
# input: 1) a directory to copy from
#        2) directory target
#
#########################################################################
sub copydir{
  my ($source, $target) = @_;
  my (@dirs, $file);

  removelastslash($source);
  removelastslash($target);

  if (!-e $target) {
    makedir($target, 0755);
  }

  opendir SOURCE, $source || die "Failure in copydir";
  @dirs = readdir SOURCE;
  closedir SOURCE;

  foreach $file (@dirs) {
    if (($file eq ".") || ($file eq "..")) {
      next;
    }

    if (-d "$source/$file") {
      copydir("$source/$file", "$target/$file"); #recurse
    } else {
      copy("$source/$file", "$target/$file");
    }
  }
}

#########################################################################
#
#                                                            install_file
#
# input: 1) source file
#        2) target file
#
#########################################################################
sub install_file{
  my ($source, $target) = @_;

  open INPUT, $source or die "Couldn't open $source";
  open OUTPUT, ">$target" or die "Couldn't write $target";

  while (<INPUT>) {
      s/#SERVERHOST/$vars{"SYSTEMNAME"}/g;
      s/#REGISTRYPORT/$vars{"REGISTRYPORT"}/g;
      s/<#XMLPATH#>/$vars{"XMLPATH"}/g;
      s/<##PERLEXE##>/$perlloc/g;
      s/#WEBROOT/$vars{"WEBURL"}/g;
      print OUTPUT $_;
  }

  close INPUT;
  close OUTPUT;

  chmod 0644, $target;

  print ".";
}

#########################################################################
#
#                                                                 resolve
#
# input: $dir - absolute pathname of current directory
#        $link - string containing the readlink() results for a
#                symbolic link in $dir to be processed
#
# returns: absolute pathname of the target of the symbolic link
#
#########################################################################
sub resolve{
    my($dir, $link) = @_;
    my(@alinkp, $d, $alinkp);

    # make array representations of
    # the current directory and symbolic link

    # if we have a leading / in our $dir or $link,
    # we'll need to shift to get rid of the leading
    # empty array element

    @dirp=split(/\//, $dir);
    shift(@dirp) if (!($dirp[0]));
    @linkp=split(/\//, $link);
    shift(@linkp) if (!($linkp[0]));

    # @alinkp is an array that we will build to contain the absolute link
    # target pathname.  If the link does not begin with a /, it is a relative link,
    # and we need to place our current directory into the @alinkp array.

    if ($link !~ /^\//) {
	@alinkp=@dirp;
    }

    # modify the @alinkp array according
    # to each path component of the @linkp array
    # (an array representation of the symbolic link
    # given to us), to arrive at the ultimate absolute
    # pathname of the symbolic link

    $d = shift(@linkp);

    while ($d) {
	if ($d eq "..") {
	    pop(@alinkp);
	}
	elsif ($d ne "."){
	    push(@alinkp, $d);
	}
	$d=shift(@linkp);
    }

    $"='/';

    # perl functions return the value of the last expression
    # in the subroutine

    $alinkp="/@alinkp";
}

#########################################################################
#
#                                                                canonify
#
# input: $pathname - a directory or filename path, may be relative
# or use ~ to represent the current user's home directory
#
# returns: absolute location of the givevn pathname
#
#########################################################################
sub canonify {
  my ($pathname) = @_;
  my ($homedir);

  $pathname = removelastslash($pathname);

  if (!(($pathname =~ /^\//) || ($pathname =~ /^~\//))) {
    $pathname = resolve(cwd(), $pathname);
  }

  if ($pathname =~ /^~\//) {
    $homedir = $ENV{'HOME'};
    removelastslash($homedir);
    $pathname =~ s/\~\//$homedir\//g;
  }

  return $pathname;
}

#########################################################################
#
#                                                                 dirname
#
# input: 1) a filename path
#
# return: the directory containing the filename given
#
#########################################################################
sub dirname{
  my ($dirpath) = @_;
  my (@comps);

  $dirpath = canonify($dirpath);

  @comps = split(/\//, $dirpath);
  pop @comps;
  return join('/', @comps);
}
