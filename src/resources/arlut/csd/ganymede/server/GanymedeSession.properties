# GanymedeSession.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 May 2004

#
# global
#

global.permissions_error = Permissions Error
global.no_such_object_type = Error, "{0}" is not a valid object type in this Ganymede server.

#
# constructors
#

init.no_semaphore = Couldn''t create {0} GanymedeSession.. semaphore disabled: {1}
init.semaphore_error = semaphore error: {0}

# init.loggedin is used in the Ganymede admin console to show a user''s status

init.loggedin = logged in

#
# checkIn()
#

checkIn.exception = Ganymede session for {0} has a checkIn() cause objectsCheckedOut to go negative

#
# timeCheck()
#

timeCheck.sending = Sending a timeout message to {0}
timeCheck.forceOffNoObjs = You have been idle for over {0,number,#} minutes with no transactions in progress.  You are being disconnected as a security precaution.
timeCheck.forceOffWithObjs = You have been idle for over {0,number,#} minutes.  You are being disconnected as a security precaution.
timeCheck.caught_throwable = Throwable condition caught while trying to send a timeout message to {0}:\n\n{1}

#
# forceOff()
#

forceOff.log_event = Abnormal termination for username: {0}\n\n{1}
forceOff.forcing = Forcing {0} off for {1}.

#
# sendMessage()
#

sendMessage.exception = type out of range

#
# unreferenced()
#

unreferenced.reason = Network connection to the Ganymede client process has been lost.

#
# logout()
#

logout.normal_event = OK logout for username: {0}
logout.logged_off = {0} logged off

#
# selectPersona()
#

selectPersona.attempting_timecheck = User {0} attempting to re-authenticate non-privileged login after being timed out.
selectPersona.failed_timecheck = User {0} failed to re-authenticate a login that timed out.
selectPersona.giving_up = User {0}''s privileged login as {1} timed out.  Downshifting to non-privileged access.

#
# openTransaction()
#

openTransaction.error = Server: Error in openTransaction()
openTransaction.error_text = Error.. transaction already opened

#
# commitTransaction()
#

commitTransaction.error = Server: Error in commitTransaction()
commitTransaction.error_text = Error.. no transaction in progress
commitTransaction.user_committed = User {0} committed transaction.

#
# abortTransaction()
#

abortTransaction.exception = No transaction in progress
abortTransaction.user_aborted = User {0} cancelled transaction.

#
# sendMail()
#

# the following message is re-used under sendHTMLMail

sendMail.signature = This message was sent by {0}, who is running the Ganymede client on {1}.
sendMail.local_signature = This message was sent by the {0} process, running inside the Ganymede server.

#
# reportClientBug
#

reportClientBug.logPattern = \nCLIENT ERROR DETECTED:\nuser == "{0}"\nhost == "{1}"\nclient id string == "{2}"\nexception trace == "{3}"\n

#
# reportClientVersion
#

reportClientVersion.logPattern = \nClient Version Report:\nuser == "{0}"\nhost == "{1}"\nclient id string == "{2}"

#
# viewObjectHistory()
#

viewObjectHistory.null_invid = Null invid passed into viewObjectHistory
viewObjectHistory.null_pointer = Can''t return history for an object that has been deleted or does not exist ({0})

# the next two messages are also used in viewAdminHistory()

viewObjectHistory.permissions = Permissions denied to view the history for this invid.
viewObjectHistory.no_log = Log not active, can''t view invid history

#
# viewAdminHistory()
#

viewAdminHistory.null_invid = Null invid passed into viewAdminHistory
viewAdminHistory.wrong_invid = Wrong type of invid passed into viewAdminHistory
viewAdminHistory.null_pointer = argh!! null object in viewAdminHistory on invid {0}

#
# view_db_object()
#

view_db_object.no_object_error = Object Not Found
view_db_object.no_object_error_text = Could not find object {0} in the database.  Perhaps the object does not exist?
view_db_object.permissions_error_text = Permission to view object [{0} - {1}] denied.

#
# edit_db_object()
#

edit_db_object.no_object_error_text = Error, object [{0}] does not appear to exist.  Couldn''t edit it.
edit_db_object.already_editing = Error, object already being edited
edit_db_object.already_editing_text = {0} [{1} - {2}] is already being edited by user {3} on host {4}
edit_db_object.checking_out_error = Error checking object out for editing
edit_db_object.checking_out_error_text = Error checking out {0} [{1} - {2}] for editing.\nPerhaps someone else was editing it?
edit_db_object.permissions_error_text = Permission to edit {0} [{1} - {2}] denied.
edit_db_object.custom_class_load_error_text = Error loading custom class for this object.

#
# create_db_object()
#

create_db_object.cant_create = Can''t Create Object
create_db_object.invalid_type = Permission to create object of *invalid* type {0} denied.
create_db_object.type_no_perm = Permission to create object of type {0} denied.
create_db_object.operation_refused = Can''t create new object, the operation was refused
create_db_object.no_owner_group = Can''t create new object, no owner group to put it in.
create_db_object.custom_class_load_error_text = Error loading custom class for this object.

#
# clone_db_object()
#

clone_db_object.clone_error = Client error
clone_db_object.clone_error_text = Error, the client attempted to clone a null invid.
clone_db_object.denied = Cloning DENIED
clone_db_object.denied_msg = Cloning operation refused for {0} object {1}.

#
# inactivate_db_object()
#

inactivate_db_object.error = Server: Error in inactivate_db_object()
inactivate_db_object.error_text = Can''t inactivate a non-existent object
inactivate_db_object.already_inactivated = Server: Can''t inactivate an inactive object
inactivate_db_object.already_inactivated_text = Error.. can''t inactivate {0} {1}, object is already inactivated
inactivate_db_object.permission_text = Don''t have permission to inactivate {0} {1}
inactivate_db_object.no_checkout = Couldn''t check out {0} {1} for inactivation
inactivate_db_object.not_inactivatable = Object {0} is not of a type that may be inactivated

#
# reactivate_db_object()
#

reactivate_db_object.error = Server: Error in reactivate_db_object()
reactivate_db_object.no_such = Can''t reactivate a non-existent object
reactivate_db_object.not_inactivated = Error, can''t reactivate {0} {1}, object is not inactivated
reactivate_db_object.permission_text = You do not have permission to reactivate {0} {1}
reactivate_db_object.no_checkout = Couldn''t check out {0} {1} for reactivation

#
# remove_db_object()
#

remove_db_object.error = Server: Error in remove_db_object()
remove_db_object.badobj1 = Error.. can''t delete the default permissions definitions.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.badobj2 = Error.. can''t delete the {0} persona.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.badobj3 = Error.. can''t delete the supergash owner group.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.no_such = Can''t delete a non-existent object
remove_db_object.permission_text = You do not have permission to delete {0} {1}
remove_db_object.must_inactivate = You do not have permission to delete {0} {1}.\n\nOnly supergash-level admins can remove objects of this type, other admins must use inactivate.
remove_db_object.deletion_refused = Permission to delete {0} {1} has been refused by custom code

#
# runXMLQuery
#

runXMLQuery.transmitter_error = Error transmitting XML Query
runXMLQuery.transmitter_error_msg = Exception caught trying to initialize XML query transmitter\n\n{0}

#
# getXML()
#

getXML.data_refused = You do not have permissions to dump the server''s data with the xml client
getXML.transmitter_error = Error transmitting XML
getXML.transmitter_error_msg = Exception caught trying to initialize server transmitter\n\n{0}

#
# unregisterWizard()
#

unregisterWizard.exception = Tried to unregister a wizard that wasn''t registered
