# DBSession.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 May 2004

global.notransaction = {0} called outside of a transaction

#
# createDBObject()
#

createDBObject.badowner = bad ownership invid
createDBObject.checkedout = Owner group {0} is currently checked out by:\n{1}
createDBObject.failure = Couldn''t create object
createDBObject.addObject_failed = Couldn''t create the object, because it came pre-linked to a deleted object.\nDon''t worry, this wasn''t your fault.\n\
 Talk to whoever customized Ganymede for you, or try again later.
createDBObject.created = Created new object : {0}, invid = {1}
createDBObject.field_report = field {0} is {1}:{2}

#
# editDBObject()
#

editDBObject.noobject = *** couldn''t find object, base = {0}, obj = {1}

#
# deleteDBObject()
#

deleteDBObject.cant_delete = Can''t delete {0}
deleteDBObject.cant_delete_text = Couldn''t delete {0}, someone else is working with the object
deleteDBObject.cant_delete_text2 = {0} can''t be deleted because an object which points to it is currently checked out for editing by someone else.
deleteDBObject.error = Server: Error in DBSession.deleteDBObject()
deleteDBObject.error_text = Error.. exception thrown while deleting {0}: {1}

#
# inactivateDBObject()
#

inactivateDBObject.error = Server: Error in DBSession.inactivateDBObject()
inactivateDBObject.error_text = Error.. can''t inactivate an object that has already been inactivated or deleted
inactivateDBObject.error_text2 = Error.. exception thrown while inactivating {0}: {1}


#
# reactivateDBObject()
#

reactivateDBObject.error = Server: Error in DBSession.reactivateDBObject()
reactivateDBObject.error_text = Error.. can''t reactivate an object that is being deleted\nIf you need to undo an object deletion, cancel your transaction.
reactivateDBObject.error_text2 = Error.. can''t reactivate an object that is not inactive.
reactivateDBObject.error_text3 = Error.. exception thrown while reactivating {0}: {1}
reactivateDBObject.debug1 = DBSession.reactivateDBObject(): Calling eObj.reactivate()
reactivateDBObject.debug2 = DBSession.reactivateDBObject(): Got back from eObj.reactivate()
reactivateDBObject.debug3 = DBSession.reactivateDBObject(): object refused reactivation, rolling back

#
# getContainingObj()
#

getContainingObj.integrity = getContainingObj() couldn''t find owner of embedded object {0}


#
# openTransaction()
#

openTransaction.transaction = transaction already open.

#
# commitTransaction()
#

commitTransaction.notransaction = {0}:commitTransaction called outside of a transaction
commitTransaction.debug1 = {0}: entering commitTransaction
commitTransaction.debug2 = {0}: committing editset
commitTransaction.debug3 = {0}: committed transaction {1}
commitTransaction.debug4 = {0}: committed transaction

#
# abortTransaction()
#

abortTransaction.cant_abort = abortTransaction() for {0}, can''t safely dump writeLock.. can''t kill it off
abortTransaction.error = Server: Error in DBSession.abortTransaction()
abortTransaction.error_text = Error.. transaction could not abort: can''t safely dump writeLock

#
# getObjects()
#

getTransactionalObjects.no_base = Error, getTransactionalObjects() called on baseid {0}, but that base does not exist.
