# DBObjectBaseField.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 February 2005

#
# global
#

global.xmlErrorTitle = XML
global.badItemTree = bad XMLItem tree:\n{0}
global.not_editing_schema = Not in a schema editing context.
global.schema_editing_error = DBObjectBaseField: Schema Editing Error
global.system_field = Can''t edit system field: {0}
global.not_array = Not an array field: {0}
global.not_boolean = Not a boolean field: {0}
global.not_labeled_boolean = Not a labeled boolean field: {0}
global.not_string = Not a string field: {0}
global.not_string_or_password = Not a string or password field: {0}
global.not_password = Not a password field: {0}
global.not_bcrypt = Not a BCrypt-using password field: {0}
global.not_shacrypt = Not a ShaUnixCrypt-using password field: {0}
global.not_invid = Not an invid field: {0}
global.system_field_change_attempt = Can''t change the type of a system field: {0}

#
# receive
#

receive.default_tab_name = General

#
# setXML
#

setXML.bad_nextitem = DBObjectBaseField.setXML(): next element != open fielddef: {0}
setXML.no_id = fielddef does not define id attr:\n{0}
setXML.bad_id = fielddef defines an id attr out of range.. must be >= 100 for custom fields:\n{0}
setXML.id_failure = fielddef could not have its id set:\n{0}\n{1}
setXML.name_failure = fielddef could not have its name set:\n{0}\n{1}
setXML.bad_commentChild = unrecognized children in comment block:\n{0}
setXML.dup_type = redundant type definition for this field:\n{0}
setXML.missing_type = typedef tag does not contain type attribute:\n{0}
setXML.unrecognized_type = typedef tag does not contain recognizable type attribute: {0} in fielddef tree:\n{1}
setXML.unrecognized_item = unrecognized XML item: {0} in fielddef tree:\n{1}
setXML.failed_field_comment = fielddef could not set comment:\n{0}\n{1}

#
# doStringXML
#

doStringXML.bad_string_typedef_item = Unrecognized string typedef entity: {0}\nIn field def:\n{1}
doStringXML.bad_vector_op = fielddef could not set vector bit to {0}:\n{1}\n{2}
doStringXML.bad_vector_limit = fielddef could not set vector maximum size: {0,number,#}\n{1}\n{2}
doStringXML.bad_min_length = fielddef could not set min length: {0,number,#}\n{1}\n{2}
doStringXML.bad_max_length = fielddef could not set max length: {0,number,#}\n{1}\n{2}
doStringXML.bad_ok_chars = fielddef could not set ok chars: {0}\n{1}\n{2}
doStringXML.bad_bad_chars = fielddef could not set bad chars: {0}\n{1}\n{2}
doStringXML.bad_regexp = fielddef could not set regular expression: {0}\n{1}\n{2}
doStringXML.bad_regexp_desc = fielddef could not set regular expression description: {0}\n{1}\n{2}
doStringXML.bad_multiline = fielddef could not set multiline: {0}\n{1}\n{2}
doStringXML.bad_namespace = fielddef could not set namespace: {0}\n{1}\n{2}

#
# doBooleanXML
#

doBooleanXML.bad_boolean_typedef_item = Unrecognized boolean typedef entity: {0}\nIn field def:\n{1}
doBooleanXML.bad_labeled_bit = fielddef could not set labeled bit to {0}:\n{1}\n{2}
doBooleanXML.bad_true_label = fielddef could not set true label to {0}\n{1}\n{2}
doBooleanXML.bad_false_label = fielddef could not set false label to {0}\n{1}\n{2}

#
# doPasswordXML
#

doPasswordXML.bad_password_typedef_item = Unrecognized password typedef entity: {0}\nIn field def:\n{1}
doPasswordXML.bad_min_length = fielddef could not set min length: {0,number,#}\n{1}\n{2}
doPasswordXML.bad_max_length = fielddef could not set max length: {0,number,#}\n{1}\n{2}
doPasswordXML.bad_ok_chars = fielddef could not set ok chars: {0}\n{1}\n{2}
doPasswordXML.bad_bad_chars = fielddef could not set bad chars: {0}\n{1}\n{2}
doPasswordXML.bad_cracklib = fielddef could not set cracklib_check flags: {0}, {1}\n{2}\n{3}
doPasswordXML.bad_history_check = fielddef could not set history_check flags: {0}, {1}, {2}\n{3}\n{4}
doPasswordXML.bad_crypted = fielddef could not set crypted flag: {0}\n{1}\n{2}
doPasswordXML.bad_md5_crypted = fielddef could not set md5 crypted flag: {0}\n{1}\n{2}
doPasswordXML.bad_apache_md5_crypted = fielddef could not set apache md5 crypted flag: {0}\n{1}\n{2}
doPasswordXML.bad_windows_hashed = fielddef could not set windows hashing flag: {0}\n{1}\n{2}
doPasswordXML.bad_bcrypt_hashed = fielddef could not set BCrypt hashing flag: {0}\n{1}\n{2}
doPasswordXML.bad_bcrypt_rounds = fielddef tried to set an invalid BCrypt round count (must be >= 4 and <= 31): {0}\n{1}
doPasswordXML.bad_ssha_hashed = fielddef could not set windows hashing flag: {0}\n{1}\n{2}
doPasswordXML.bad_sha_unix_type = fielddef could not set Sha Unix Crypt type ("type" attribute must be "256" or "512"): {0}\n{1}
doPasswordXML.bad_sha_unix_rounds = fielddef tried to set an invalid Sha Unix Crypt round count (must be >= 1000 and <= 999999999): {0}\n{1}
doPasswordXML.bad_sha_unix_crypted = fielddef could not set SHA Unix Crypt hashing flag: {0}\n{1}\n{2}
doPasswordXML.bad_plaintext = fielddef could not set plaintext flag: {0}\n{1}\n{2}

#
# doIPXML
#

doIPXML.bad_ip_typedef_item = Unrecognized IP typedef entity: {0}\nIn field def:\n{1}
doIPXML.bad_vector_op = fielddef could not set vector bit to {0}:\n{1}\n{2}
doIPXML.bad_vector_limit = fielddef could not set vector maximum size: {0,number,#}\n{1}\n{2}
doIPXML.bad_namespace = fielddef could not set namespace: {0}\n{1}\n{2}

#
# doNumericXML
#

doNumericXML.bad_numeric_typedef_item = Unrecognized numeric typedef entity: {0}\nIn field def:\n{1}
doNumericXML.bad_namespace = fielddef could not set namespace: {0}\n{1}\n{2}

#
# doInvidXML
#

doInvidXML.bad_invid_typedef_item = Unrecognized invid typedef entity: {0}\nIn field def:\n{1}
doInvidXML.bad_target_def = targetobject item does not specify name or id: {0}\n{1}\n{2}
doInvidXML.bad_target_field_def = targetfield item does not specify name or id: {0}\n{1}\n{2}
doInvidXML.bad_vector_op = fielddef could not set vector bit to {0}:\n{1}\n{2}
doInvidXML.bad_vector_limit = fielddef could not set vector maximum size: {0,number,#}\n{1}\n{2}
doInvidXML.bad_invid_target_base = fielddef could not set invid target base: {0}\n{1}\n{2}
doInvidXML.bad_invid_target_base_num = fielddef could not set invid target base: {0,number,#}\n{1}\n{2}
doInvidXML.bad_null_target_base = fielddef could not clear invid target base:\n{0}\n{1}
doInvidXML.bad_invid_target_field = fielddef could not set invid target field: {0}\n{1}\n{2}
doInvidXML.bad_invid_target_field_num = fielddef could not set invid target field: {0}\n{1}\n{2}
doInvidXML.bad_null_target_field = fielddef could not clear invid target field:\n{0}\n{1}
doInvidXML.bad_embedded_status = fielddef could not set embedded status: {0}\n{1}\n{2}

#
# setName
#

setName.system_field = Can''t change the name of a system field.
setName.null_name = Can''t have a null or empty name.
setName.duplicate_name = Can''t set a duplicate field name, "{0}" is already taken.
setName.invalid_ganymede_name = "{0}" is not an acceptable Ganymede field name.\n\nAll Ganymede field names must be acceptable XML element names, save that spaces are allowed and underscores are not.

#
# setTabName
#

setTabName.null_name = Can''t have a null or empty tab name.

#
# setType
#

setType.bad_type = Type argument out of range
setType.in_use = Can''t change the type of a field which is in use in the database: {0}

#
# setArray
#

setArray.any_system_field = Can''t change the vector status of a system field: {0}
setArray.in_use = Can''t change the vector status of a field which is in use in the database: {0}
setArray.bad_type = Can''t set this field type ({0}) to be a vector field: {1}

#
# setID
#

setID.out_of_range = Field id number {0,number,#} is out of range: {1}.
setID.in_use = Can''t set field id number {0,number,#} on field {1}.  That field id number is already in use by another field definition.
setID.already_set = Can''t change field id number for a previously created field definition: {0}.

#
# setMaxArraySize
#

setMaxArraySize.any_system_field = Can''t change the vector limits of a system field: {0}

#
# setRegexpPat
#

setRegexpPat.bad_pattern = Bad regular expression syntax: {0}\n{1}

#
# setNameSpace
#

setNameSpace.bad_type = Can''t set a namespace constraint on this kind of field ({0}): {1}.
setNameSpace.can_not_apply = Can''t set namespace constraint {0} on field {1} without violating namespace uniqueness constraint on previously registered values.\n\nField {2} had a conflict.\nValue(s) in conflict:{3}
setNameSpace.need_namespace = Error, proper functioning of the Ganymede server depends on values of this field being unique: {0}.
setNameSpace.no_such_namespace = Error, could not find a namespace called {0} to set on field {1}.

#
# setEditInPlace
#

setEditInPlace.in_use = Can''t change the editInPlace status type of an Invid field which is in use in the database: {0}.

#
# setTargetBase
#

setTargetBase.bad_target_num = Can''t set the target base to base number {0,number,#}.  No such base is defined: {0}.
setTargetBase.bad_target = Can''t set the target base for invid field {1} to base {0}.  No such base is defined.

#
# setTargetField
#

setTargetField.no_embedded_target_field = Can''t set target field on an embedded invid field {0}.
setTargetField.asymmetry_num = Can''t set target field on a non-symmetric invid field {0} to {1,number,#}
setTargetField.bad_base_num = Can''t find object type {0,number,#} in order to set target field for {2} to {1,number,#}.
setTargetField.bad_target_field_num = Can''t find target field numbered {0,number,#} in order to set target field for {1}.

setTargetField.asymmetry = Can''t set target field on a non-symmetric invid field {0} to {1}
setTargetField.bad_base = Can''t find object type {0,number,#} in order to set target field for {2} to {1}
setTargetField.bad_target_field = Can''t find target field named {0} in order to set target field for {1}.

#
# getTypeDesc
#

getTypeDesc.boolean = boolean
getTypeDesc.numeric = numeric
getTypeDesc.float = float
getTypeDesc.field_option = field options
getTypeDesc.date = date
getTypeDesc.string = string
getTypeDesc.invid = invid
getTypeDesc.permission_matrix = permission matrix
getTypeDesc.password = password
getTypeDesc.ip_field = IP field
getTypeDesc.bad_code = <<bad type code: {0,number,#} >>

#
# genWarning1
#

genWarning1.title = Schema Editor
genWarning1.text = The requested change in this field''s allowed options has been made and will be put into effect if you commit your schema change.\n\n\
This schema change will only affect new values entered into this field in the database.  Pre-existing fields of this kind in the database may or may not \
satisfy your new constraint.
genWarning1.ok = OK

#
# genWarning2
#

genWarning2.title = Schema Editor
genWarning2.text = The requested change in this field''s allowed options has been made and will be put into effect if you commit your schema change.\n\n\
Because this schema change is being made while there are fields of this type active in the database, there may be a chance that this change will \
affect database consistency.
genWarning2.ok = OK
