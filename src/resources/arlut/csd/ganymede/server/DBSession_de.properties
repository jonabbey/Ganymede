# DBSession.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 May 2004

#global.notransaction = {0} called outside of a transaction
global.notransaction = {0} wurde ausserhalb einer Transaktion aufgerufen

#
# createDBObject()
#

#createDBObject.badowner = bad ownership invid
createDBObject.badowner = Falsche Besitzer-Invid
#createDBObject.checkedout = Owner group {0} is currently checked out by:\n{1}
createDBObject.checkedout = Die Besitzergruppe {0} wird gerade von {1} bearbeitet.
#createDBObject.addObject_failed = Couldn''t create the object, because it came pre-linked to a deleted object.\nDon''t worry, this wasn''t your fault.\n\
# Talk to whoever customized Ganymede for you, or try again later.
createDBObject.addObject_failed = Das Objekt konnte nicht erzeugt werden, da es mit einem gelöschten Objekt verknüpft ist.\nKein Benutzerfehler.\n\
 Sprechen sie mit dem, der Ganymede angepasst hat oder versuchen Sie es später noch einmal.
#createDBObject.created = Created new object : {0}, invid = {1}
createDBObject.created = Neues Objekt erzeugt: {0}, Invid = {1}
#createDBObject.field_report = field {0} is {1}:{2}
createDBObject.field_report = Feld {0} ist {1}:{2}

#
# editDBObject()
#

#editDBObject.noobject = *** couldn''t find object, base = {0}, obj = {1}
editDBObject.noobject = *** Kann Objekt nicht finden, Basis = {0}, Obj = {1}

#
# deleteDBObject()
#

#deleteDBObject.cant_delete = Can''t delete {0}
deleteDBObject.cant_delete = Kann {0} nicht löschen
#deleteDBObject.cant_delete_text = Couldn''t delete {0}, someone else is working with the object
deleteDBObject.cant_delete_text = Kann {0} nicht löschen, es wird gerade bearbeitet
#deleteDBObject.cant_delete_text2 = {0} can''t be deleted because an object which points to it is currently checked out for editing by someone else.
deleteDBObject.cant_delete_text2 = {0} kann nicht gelöscht werde, da ein damit verknüpftes Objekt gerade bearbeitet wird.
#deleteDBObject.error = Server: Error in DBSession.deleteDBObject()
deleteDBObject.error = Server: Fehler in DBSession.deleteDBObject()
#deleteDBObject.error_text = Error.. exception thrown while deleting {0}: {1}
deleteDBObject.error_text = Fehler: Beim Löschen von {0} trat Exception auf: {1}

#
# inactivateDBObject()
#

#inactivateDBObject.error = Server: Error in DBSession.inactivateDBObject()
inactivateDBObject.error = Server: Fehler in DBSession.inactivateDBObject()
#inactivateDBObject.error_text = Error.. can''t inactivate an object that has already been inactivated or deleted
inactivateDBObject.error_text = Fehler: Ein Objekt, das bereits inaktiviert oder gelöscht wurde, kann nicht inaktiviert werden
#inactivateDBObject.error_text2 = Error.. exception thrown while inactivating {0}: {1}
inactivateDBObject.error_text2 = Fehler: Beim Inaktivieren von Objekt {0} trat Exception auf: {1}


#
# reactivateDBObject()
#

#reactivateDBObject.error = Server: Error in DBSession.reactivateDBObject()
reactivateDBObject.error = Server: Fehler in DBSession.reactivateDBObject()
#reactivateDBObject.error_text = Error.. can''t reactivate an object that is being deleted\nIf you need to undo an object deletion, cancel your transaction.
reactivateDBObject.error_text = Fehler: Ein Objekt, das gerade gelöscht wird, kann nicht reaktiviert werden\nWenn Sie das Löschen rückgängig machen wollen, müssen Sie die Transaktion abbrechen.
#reactivateDBObject.error_text2 = Error.. can''t reactivate an object that is not inactive.
reactivateDBObject.error_text2 = Fehler: Ein aktives Objekt kann nicht reaktiviert werden.
#reactivateDBObject.error_text3 = Error.. exception thrown while reactivating {0}: {1}
reactivateDBObject.error_text3 = Fehler: Beim Reaktivieren von {0} trat Exception auf: {1}
#reactivateDBObject.debug1 = DBSession.reactivateDBObject(): Calling eObj.reactivate()
reactivateDBObject.debug1 = DBSession.reactivateDBObject(): eObj.reactivate() wird aufgerufen
#reactivateDBObject.debug2 = DBSession.reactivateDBObject(): Got back from eObj.reactivate()
reactivateDBObject.debug2 = DBSession.reactivateDBObject(): eObj.reactivate() Rückkehr
#reactivateDBObject.debug3 = DBSession.reactivateDBObject(): object refused reactivation, rolling back
reactivateDBObject.debug3 = DBSession.reactivateDBObject(): Das Objekt hat Reaktivierung abgelehnt, mache Aktion rückgängig

#
# getContainingObj()
#

#getContainingObj.integrity = getContainingObj() couldn''t find owner of embedded object {0}
getContainingObj.integrity = getContainingObj(): Besitzer des Embedded-Objekts {0} ist unbekannt


#
# openTransaction()
#

#openTransaction.transaction = transaction already open.
openTransaction.transaction = Transaktion ist bereits geöffnet.

#
# commitTransaction()
#

#commitTransaction.notransaction = {0}:commitTransaction called outside of a transaction
commitTransaction.notransaction = {0}:commitTransaction wurde ausserhalb einer Transaktion aufgerufen
#commitTransaction.debug1 = {0}: entering commitTransaction
commitTransaction.debug1 = {0}: Eingang commitTransaction
#commitTransaction.debug2 = {0}: committing editset
commitTransaction.debug2 = {0}: editset wird abgeschlossen
#commitTransaction.debug3 = {0}: committed transaction {1}
commitTransaction.debug3 = {0}: Transaktion {1} abgeschlossen
#commitTransaction.debug4 = {0}: committed transaction
commitTransaction.debug4 = {0}: Transaktion abgeschlossen

#
# abortTransaction()
#

#abortTransaction.cant_abort = abortTransaction() for {0}, can''t safely dump writeLock.. can''t kill it off
abortTransaction.cant_abort = abortTransaction() für {0}, kann writeLock nicht gefahrlos dumpen, kann nicht abbrechen
#abortTransaction.error = Server: Error in DBSession.abortTransaction()
#abortTransaction.error_text = Error.. transaction could not abort: can''t safely dump writeLock
abortTransaction.error_text = Fehler: Transaktion kann nicht abgebrochen werden, kann writeLock nicht gefahrlos dumpen
#abortTransaction.error = Server: Error in DBSession.abortTransaction()
abortTransaction.error = Server: Fehler in DBSession.abortTransaction()

#
# getTransactionalObjects()
#

#getTransactionalObjects.no_base = Error, getTransactionalObjects() called on baseid {0}, but that base does not exist.
getTransactionalObjects.no_base = Fehler: getTransactionalObjects() wurde mit baseid {0} aufgerufen. Diese Basis existiert nicht.
