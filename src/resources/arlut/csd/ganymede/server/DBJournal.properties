# DBJournal.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 20 December 2004

#
# init
#

init.badstore = bad parameter, store == null
init.badfile = bad parameter, filename == null
init.initing = Initializing DBStore Journal: {0}
init.creating = Creating Journal File
init.writing = Writing DBStore Journal header
init.opening = Opening Journal File for Append
init.badheader = DBJournal constructor: open string mismatch

#
# isAtLeast
#

isAtLeast.notloaded = DBJournal.isAtLeast() called before journal loaded.

#
# isLessThan
#

isLessThan.notloaded = DBJournal.isLessThan() called before journal loaded.

#
# isAtRev
#

isAtRev.notloaded = DBJournal.isAtRev() called before journal loaded.

#
# isBetweenRevs
#

isBetweenRevs.notloaded = DBJournal.isBetweenRevs() called before journal loaded.

#
# reset
#

reset.resetting = DBJournal: Resetting Journal File
reset.savingold = DBJournal: saving old Journal as {0}
reset.freshness = DBJournal: creating fresh Journal {0}
reset.logstring = Ganymede Journal Reset

#
# load
#

load.openmismatch = DBJournal.load(): Transaction open string mismatch
load.okmatch = DBJournal.load(): Transaction open string match OK
load.readingtime = Reading transaction time
load.readingobjcount = Reading object count
load.showtime = Transaction: {0}
load.readingopcode = Reading operation code for object {0}
load.readingtype = Reading object type for object {0}
load.readingcreated = Reading created object {0}
load.create = Create: {0}
load.readingedited = Reading edited object {0}
load.deltaread = Delta read:\n\t{0}\n
load.original = DBJournal.load(): original object, before delta edit:
load.postdelta = DBJournal.load(): object after delta edit:
load.readingdeleted = Reading deleted object {0}
load.delete = Delete: {0}:{1}
load.readingclosed = Reading close transaction information
load.badclosed = Transaction close timestamp mismatch
load.finished = Finished transaction
load.success = Transaction {0} successfully read from Journal.\nIntegrating transaction into DBStore memory image.
load.processing = Processing {0} objects
load.allclear = All transactions processed successfully
load.failure = DBJournal file unexpectedly ended: state = {0}
load.notfinalized = DBJournal: transaction {0} not finalized in journal, rejecting

#
# writeTransaction
#

writeTransaction.writing = Writing transaction to the Journal : {0}
writeTransaction.objcount = Objects in Transaction: {0}
writeTransaction.creating = Creating object:
writeTransaction.wroteobjedit = Wrote object edit record:\n\t{0}
writeTransaction.wroteobjdel = Wrote object deletion record:\n\t{0} : {1}
writeTransaction.dropping = Dropping object:
writeTransaction.written = Transaction {0} persisted to Journal.
writeTransaction.badundo = ***\n*** Error in DBJournal.writeTransaction()!  Couldn''t undo a transaction in the\njournal file*** after catching an exception!\n***\n*** The journal may not be completely recoverable!\n\n{0}

#
# readHeaders
#

readHeaders.loading = DBJournal: Loading transactions from {0}
readHeaders.badid = Error, id_string mismatch.. wrong file type?
readHeaders.badversion = Error, journal version mismatch.. wrong file type?
readHeaders.created = DBJournal file created {0}
