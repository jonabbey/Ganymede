# GanymedeServer.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 May 2004

#
# constructors
#

init.multiserver = Error: attempted to start a second server

#
# incrementAndTestLoginSemaphore
#

incrementAndTestLoginSemaphore.nologins = No logins allowed
incrementAndTestLoginSemaphore.nologins_shutdown = The server is currently waiting to shut down.  No logins will be accepted until the server has restarted.
incrementAndTestLoginSemaphore.nologins_shutdown_reason = The server is currently waiting to shut down.  No logins will be accepted until the server has restarted.\n\nReason for shutdown: {0}
incrementAndTestLoginSemaphore.nologins_schema_edit = Logins to the Ganymede server are temporarily unavailable.  Admin {0} is editing the server''s schema definition.
incrementAndTestLoginSemaphore.nologins_semaphore = Can''t log in to the Ganymede server.. semaphore disabled: {0}

#
# reportFailedLogin
#

reportFailedLogin.badlogevent = Bad login attempt for username: {0} from host {1}
reportFailedLogin.badlogin = Bad login attempt
reportFailedLogin.badlogintext = Bad username or password, login rejected.

#
# reportSuccessLogin
#

reportSuccessLogin.loggedin = {0} logged in from {1}
reportSuccessLogin.logevent = OK login for username: {0} from host {1}

#
# addRemoteUser
#

addRemoteUser.logged_in = User {0} logged in

#
# removeRemoteUser
#

removeRemoteUser.logged_out = User {0} logged out

#
# clearActiveUser()
#

clearActiveUser.deathThread = Ganymede Shutdown Thread

#
# getTextMessage()
#

getTextMessage.badargs = Error, attempt to use path separator in message key
getTextMessage.nodir = GanymedeServer.getTextMessage(): messageDirectoryProperty not set.  Can''t provide {0}
getTextMessage.IOExceptionReport = IOException in GanymedeServer.getTextMessage({0}):\n{1}

#
# admin()
#

admin.connect_failure = Admin Console Connect Failure
admin.semaphore_failure = Can''t connect admin console to server.. semaphore disabled: {0}
admin.badlogevent = Bad console attach attempt by: {0} from host {1}
admin.goodlogevent = Admin console attached for admin: {0} from host: {1}
admin.badlogin = Login Failure
admin.baduserpass = Bad username and/or password for admin console

#
# setShutdown()
#

setShutDown.nousers_state = No users logged in, shutting down.
setShutDown.waiting_state = Server going down.. waiting for users to log out

#
# shutdown()
#

shutdown.failure = Shutdown failure
shutdown.failure_text = Shutdown failure.. couldn''t shutdown the server, semaphore already locked with condition {0}
shutdown.console_notify_reason = Ganymede server going down for ''{0}''
shutdown.console_notify_admin = Ganymede admin {0} on host {1} shutting down server
shutdown.console_notify_reason_admin = Ganymede admin {1} on host {2} shutting down server for ''{0}''
shutdown.goingdown = Server going down.. waiting for any builder tasks to finish phase 2
shutdown.dumping = Server going down.. performing final dump
shutdown.dumperror = shutdown error: couldn''t successfully consolidate db.
shutdown.locked = Server going down.. database locked
shutdown.clients = Server going down.. disconnecting clients
shutdown.clientNotification = Server going down
shutdown.scheduler = Server going down.. interrupting scheduler
shutdown.consoles = Server going down.. disconnecting consoles
shutdown.jython = Server going down.. disconnecting Jython consoles
shutdown.byeconsoles = Server going down now.
shutdown.closinglog = Server completing shutdown.. waiting for log thread to complete.
shutdown.logIOException = IO Exception closing log file: {0}
shutdown.Exception = Caught exception during final shutdown:
shutdown.Error = Caught error during final shutdown:
shutdown.finally = Server shutdown complete.

#
# sweepInvids()
#

sweepInvids.noproceed = sweepInvids couldn''t proceed.
sweepInvids.sweeping = GanymedeServer.sweepInvids(): sweeping {0}
sweepInvids.removing_vector = Removing invid: {0} from vector field {1} in object {2}:{3}
sweepInvids.removing_scalar = Removing invid: {0} from scalar field {1} in object {2}:{3}
sweepInvids.done = GanymedeServer.sweepInvids(): completed

#
# checkInvids()
#

checkInvids.noproceed = checkInvids couldn''t proceed.
checkInvids.checking = Testing invid links for objects of type {0}
checkInvids.done = Ganymede invid link test complete

#
# checkEmbeddedObjects()
#

checkEmbeddedObjects.noproceed = checkEmbeddedObjects couldn''t proceed.
checkEmbeddedObjects.checking = Testing embedded object container integrity for objects of type {0}
checkEmbeddedObjects.aha = Couldn''t find containing object for {0}:{1}
checkEmbeddedObjects.done = Ganymede embedded object test complete

#
# sweepEmbeddedObjects()
#

sweepEmbeddedObjects.failure = Failure
sweepEmbeddedObjects.failure_text = Couldn''t get a dump lock to sweep the database for embedded objects
sweepEmbeddedObjects.checking = Testing embedded object container integrity for objects of type {0}
sweepEmbeddedObjects.complete = Ganymede embedded object sweep complete
sweepEmbeddedObjects.delete_failure = Couldn''t delete object {0}
sweepEmbeddedObjects.delete_ok = Deleted object {0}
sweepEmbeddedObjects.error = Error
sweepEmbeddedObjects.error_text = Mysterious not logged in error: {0}
