# InvidDBField.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 13 September 2004

#
# global
#

global.no_perms = Don''t have permission to change field {0} in object {1}
global.oops_vector = Scalar method called on a vector field: {0} in object {1}
global.oops_scalar = Vector method called on a scalar field: {0} in object {1}
global.non_editable = This method can''t be called on an InvidDBField in a non-editable context.
global.not_logged_in = Not logged in.

#
# init
#

init.type_mismatch = scalar value constructor called on vector field {0} in object {1}
init.type_mismatch2 = vector value constructor called on scalar field {0} in object {1}

#
# emitInvidXML
#

emitInvidXML.bad_invid = InvidDBField.emitInvidXML(): {0} has an invalid invid: {1}, not writing it to XML.
emitInvidXML.bad_foreign_keys = InvidDBField.emitInvidXML(): mismatched attribute/value pairs returned from getForeignSyncKeys call on {0}
emitInvidXML.bad_attribute_name = InvidDBField.emitInvidXML(): improper use of a reserved attribute name in attribute/value pairs returned from getForeignSyncKeys call on {0}

#
# value
#

value.type_mismatch = scalar accessor called on vector field {0} in object {1}
value.type_mismatch2 = vector accessor called on scalar field {0} in object {1}

#
# getRemoteLabel
#

getRemoteLabel.nonesuch = *** no target for invid {0} ***

#
# getDiffString
#

getDiffString.badtype = Bad field comparison {0}
getDiffString.deleted_items = \tDeleted: {0}\n
getDiffString.added_items = \tAdded: {0}\n
getDiffString.scalar = \tOld: {0}\n\tNew: {1}\n

#
# checkBindConflict
#

checkBindConflict.subj = Link Error
checkBindConflict.overlink = Your operation could not be performed.  The target object {0} can only be linked to one {1} at a time.

#
# bind
#

bind.noremote = Null newRemote {0} in object {1}
bind.noteditable = Not an editable invid field: {0} in object {1}
bind.deletedremote_sub = Bind link error
bind.deletedremote_text = Can''t forge an asymmetric link between {0} and invid {1}, the target object is being deleted.
bind.no_oldref = InvidDBField.bind(): Couldn''t find old reference
bind.no_oldref_text = Your operation could not succeed because field {0} was linked to a remote reference {1} that could not be found \
for unlinking.\n\nThis is a serious logic error in the server.
bind.no_unlink_sub = InvidDBField.bind(): Couldn''t unlink from old reference
bind.no_perms_old = Your operation could not succeed because you don''t have permission to dissolve the link to the old object \
held in field {0} in object {1}.
bind.busy_old = Field {0} could not be unlinked from the {1} {2} object, which is busy being edited by {3} on system {4}.
bind.busy_old2 = Field {0} could not be unlinked from the {1} {2} object, which is busy being edited by another user.
bind.busy_old_temp = Field {0} could not be unlinked from the {1} {2} object.  \
This is probably a temporary condition due to other user activity on the Ganymede server.
bind.schema_error = Your operation could not succeed due to an error in the server''s schema.  Target field {0} in object {1} is not an invid field.
bind.inconsistency = Your operation could not succeed due to a possible inconsistency in the server database.  Target field number {0} in object {1} does not exist.
bind.inconsistency2 = Your operation could not succeed due to a possible inconsistency in the server database.  Target field {0} is undefined in object {1}.
bind.no_newref_sub = InvidDBField.bind(): Couldn''t find new reference
bind.no_newref = Your operation could not succeed because field {0} cannot link to non-existent invid {1}.\n\nThis is a serious logic error in the server.
bind.no_new_link_sub = InvidDBField.bind(): Couldn''t link to new reference
bind.deleted_new = Field {0} cannot be linked to remote object {1}.\n\nThe remote object has been deleted.
bind.no_newref_perm = Field {0} could not be linked to the {1} {2} object.  You do not have permission to edit the {1} {2} object.
bind.busy_new = Field {0} could not be linked to the {1} {2} object, which is busy being edited by {3} on system {4}.
bind.busy_new2 = Field {0} could not be linked to the {1} {2} object, which is busy being edited by another user.
bind.busy_new_temp = Field {0} could not be linked to the {1} {2} object.  \
This is probably a temporary condition due to other user activity on the Ganymede server.

#
# unbind
#

unbind.noteditable = Not an editable invid field: {0} in object {1}
unbind.no_oldref = InvidDBField.unbind(): Couldn''t find old reference
unbind.no_unlink_sub = InvidDBField.unbind(): Couldn''t unlink from old reference
unbind.perm_fail = We couldn''t unlink field {0} in object {1} from field {2} in object {3} due to a permissions problem.

#
# dissolve
#

dissolve.no_finalize_vect = InvidDBField.dissolve(): couldn''t finalizeDeleteElement
dissolve.refused_vect = The custom plug-in class for object {0} refused to allow us to clear out all the references in field {1}:\n\n{2}
dissolve.refused_vect_notext = The custom plug-in class for object {0} refused to allow us to clear out all the references in field {1}
dissolve.no_finalize_scalar = InvidDBField.dissolve(): couldn''t finalizeSetValue
dissolve.refused_scalar = The custom plug-in class for object {0} refused to allow us to clear out the reference in field {1}:\n\n{2}
dissolve.refused_scalar_notext = The custom plug-in class for object {0} refused to allow us to clear out the reference in field {1}
dissolve.unbound_vector = Warning: dissolve for {0}:{1} called with an unbound invid {2}
dissolve.unbound_scalar = Warning: dissolve for {0}:{1} called with an unbound invid {2}, current value = {3}

#
# establish
#

establish.deletion_sub = InvidDBField.establish(): Can''t link to deleted object
establish.deletion_text = Couldn''t establish a new linkage in field {0} because object {1} has been deleted.
establish.overrun_sub = InvidDBField.establish(): Can''t link to full field
establish.overrun_text = Couldn''t establish a new linkage in vector field {0} in object {1} because the vector field is already at maximum capacity.
establish.schema_sub = InvidDBField.establish(): Schema logic error
establish.schema_text = The reverse link field {0} in object {1} refused the pointer binding \
because it already points back to the object requesting binding.  This sugests that multiple fields in the originating \
object {2} {3} are trying to link to one vector field in we, the target, which can''t work.  If one of the fields in {3} \
were ever cleared or changed, we''d be cleared and the symmetric relationship would be broken.\n\n\
Have your adopter check the schema.
establish.schema_scalar_text = The reverse link field {0} in object {1} refused the pointer binding \
because it already points back to the object requesting binding.  This sugests that multiple fields in the originating \
object {2} {3} are trying to link to one scalar field in we, the target, which can''t work.  If one of the fields in {3} \
were ever cleared or changed, we''d be cleared and the symmetric relationship would be broken.\n\n\
Have your adopter check the schema.
establish.no_add_sub = InvidDBField.establish(): finalizeAddElement refused
establish.no_add_text = Couldn''t establish a new linkage in vector field {0} in object {1} because the custom plug in code \
for this object refused to approve the operation:\n\n{2}
establish.no_add_text2 = Couldn''t establish a new linkage in vector field {0} in object {1} because the custom plug in code \
for this object refused to approve the operation.
establish.no_set_sub = InvidDBField.establish(): finalizeSetValue refused
establish.no_set_text = Couldn''t establish a new linkage in field {0} in object {1} because the custom plug in code \
for this object refused to approve the operation:\n\n{2}
establish.no_set_text2 = Couldn''t establish a new linkage in field {0} in object {1} because the custom plug in code \
for this object refused to approve the operation.

#
# test
#

test.no_contains = *** InvidDBField.test(): aSymLinkTracker doesn''t contain {0} for Invid {1} pointed to from {2} in field {3}
test.pointer_to_null_object = *** InvidDBField.test(): Invid pointer to null object {0} located: {1} in field {2}
test.bad_symmetry = *** InvidDBField.test(): schema error!  back-reference field not an invid field!!\n\t>{0}:{1}, referenced from {2}:{3}
test.pointer_to_null_field = InvidDBField.test(): Object {0}, field {1} is targeting a field, {2} in object {3} which does not exist!
test.pointer_to_undefined_field = InvidDBField.test(): Object {0}, field {1} is targeting a field, {2} in object {3} which is not defined!
test.empty_backlink = *** InvidDBField.test(): Null back-link invid found for invid {0} in object {1} in field {2}
test.no_symmetry = *** InvidDBField.test(): No back-link invid found for invid {0} in object {1}:{2} in {3}

#
# setElement
#

setElement.edit_in_place = Can''t manually set element in edit-in-place vector: {0} in object {1}

#
# addElement
#

addElement.edit_in_place = Can''t manually add element to edit-in-place vector: {0} in object {1}
addElement.overflow_sub = InvidDBField.addElement() - vector overflow
addElement.overflow_text = Field {0} is already at or beyond the specified array size limit.

#
# addElements
#

addElements.subject = AddElements Error
addElements.edit_in_place = Can''t manually add elements to edit-in-place vector: {0} in object {1}
addElements.error_sub = Server: Error in InvidDBField.addElements()
addElements.null_empty_param = Field {0} can''t add a null or empty vector.
addElements.overflow_text = Field {0} can''t accept {1} additional values, as it already contains {2} values.  Only {3} values in total are allowed.

#
# createNewEmbedded
#

createNewEmbedded.non_embedded = Edit-in-place method called on a referential invid field {0} in object {1}

#
# deleteElement
#

deleteElement.rejected = InvidDBField.deleteElement() - custom code rejected element deletion
deleteElement.no_finalize = Custom code refused deletion of element {0} from field {1} in object {2}.\n\n{3}
deleteElement.no_finalize_no_text = Custom code refused deletion of element {0} from field {1} in object {2}.

#
# deleteElements
#

deleteElements.not_found = Field {0} can''t remove non-present items: {1}.

#
# encodedValues
#

encodedValues.bad_invid = Error in InvidDBField field <{0}:{1}> encodedValues() method.. couldn''t view invid {2} from the database to view its label.

#
# verifyNewValue
#

verifyNewValue.bad_type = Submitted value {0} is not an Invid!  Serious code error while trying to edit field {1} in object {2}.
verifyNewValue.bad_object_type = Invid value {0} points to the wrong kind of object for field {1} in object {2}, which should point to an object of type {3}.
verifyNewValue.bad_choice = {0} is not a valid choice for field {1} in object {2}.
