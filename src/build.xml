<!--
    Ganymede Ant build file

    Deepak Giridharagopal, deepak@arlut.utexas.edu
-->

<project name="ganymede" default="build" basedir=".">

  <!--
    Project-wide settings. All directories are relative to the project
    directories.
  -->

  <property name="src.dir" value="ganymede"/>
  <property name="jython.dir" value="jython"/>
  <property name="lib.dir" value="lib"/>
  <property name="resources.dir" value="resources"/>

  <!-- Build directories -->
  <property name="build.dir" value="build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.doc" value="${build.dir}/doc"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.crypto" value="${build.dir}/crypto"/>

  <!-- Dist directories -->
  <property name="dist.jars" value="../jars"/>
  <property name="dist.doc" value="../doc/javadoc"/>

  <!-- Global settings -->
  <property name="debug.flag" value="true"/>
  <property name="debug.level" value="source,lines,vars"/>

  <!-- Global properties for javac -->
  <property name="build.compiler" value="modern"/>

  <!-- ============================================================

       We use crypto for two things in Ganymede.

       The first is we want to have a private key on the server and a
       self-signed certificate (containing the matching public key) on
       the client in order to SSL-protect communications between the
       client and the server.

       We have no need to use a certificate authority to authenticate
       this private/public key pair because the server, client, and
       admin console jar files are built with the appropriate crypto
       material included.

       This section defines the properties we need to generate this
       private/public key pair and to package the appropriate
       materials in the jar files we build.

       You shouldn't need to change any of the following.

       ============================================================ -->

  <!-- Are we going to use SSL?  (Say yes!) -->
  <property name="use.ssl" value="true"/>

  <!-- We're storing our server SSL key in a known location with a
       known alias and store password so the server can access it.

       The server_ssl_key.storepass must match the value stored in
       arlut.csd.ganymede.common.RMISSLServerSocketFactory.passphrase.

       We don't bother signing the server_ssl_key because we're
       counting on the key being held in the server_ssl_key.keystore
       on the server. -->
  <property name="server_ssl_key.keystore" value="${build.crypto}/arlut/csd/ganymede/common/server_ssl_key.jks"/>
  <property name="server_ssl_key.storepass" value="ganypassphrase"/>
  <property name="server_ssl_key.keyalias" value="ganymedeserverkey"/>

  <!-- Likewise, we've got a cert for our server SSL key that is
       distributed with the clients in a known location -->
  <property name="client_ssl_cert.keystore" value="${build.crypto}/arlut/csd/ganymede/common/client_ssl_cert.jks"/>
  <property name="client_ssl_cert.storepass" value="unknown"/>

  <condition property="sslkeys.notgenerated">
    <not>
      <and>
        <available file="${server_ssl_key.keystore}"/>
        <available file="${client_ssl_cert.keystore}"/>
      </and>
    </not>
  </condition>

  <condition property="need.sslkeys">
    <and>
      <equals arg1="${use.ssl}" arg2="true"/>
      <equals arg1="${sslkeys.notgenerated}" arg2="true"/>
    </and>
  </condition>

  <!-- ============================================================

       The second thing we use crypto for is to sign the client
       and admin console jar files so that they will be accepted by
       Java Web Start.

       Starting with the version 7u40 of the Oracle JDK, the JDK will
       either provide a scary warning dialog or will refuse to permit
       the clients to run unless the client jar files are signed with
       a certificate from a certificate authority (CA) recognized by
       the Oracle JDK distribution.

       In order to set this up, you need to create a private / public
       key pair using the Java keytool command, then use keytool to
       generate a certificate signing request (CSR)..

       Here are the instructions for this as provided by one
       certificate authority:

       https://www.globalsign.com/support/ordering-guides/SignJavaCodeApplets.pdf

       After generating the CSR, you will need to purchase a
       certificate from a certificate authority recognized by the
       Oracle JDK, such as GlobalSign, Thawte, Verisign, among others.

       You'll need to retrieve the purchased certificate (and any
       intermediate certificates provided to you by the certificate
       authority web site) and bind them with the private key you
       initially generated with keytool in a Java keystore (JKS) file.

       Once you've got a Java keystore that includes the private key
       along with the certificate or certificates from the CA, you'll
       need to specify the following properties:

       jar_signing.keystore, the location of the keystore
       jar_signing.storepass, the password for the keystore
       jar_signing.keyalias, the identifier for the private key
       jar_signing.keypass, the password for the private key

       For obvious reasons, the keystore and the properties specified
       above should never be recorded in Git or any other revision
       control system.  For this reason, I've put *.jks and
       src/build/crypto/crypto.properties in the .gitignore file at
       the root of the Ganymede distribution.

       Put the above properties in src/build/crypto/crypto.properties,
       and they'll be used by this build.xml file.

       If any of the above properties are not found in
       crypto.properties, the jars produced by the "jars" task will
       not be signed, and a warning will be emitted.

       ==

       In addition to the above, this build.xml file supports signing
       the JNLP files that you use to launch the client and admin
       console.

       In order to sign your client JNLP file, you'll need to create
       the following directory tree under src/build/crypto:
       
       client/JNLP-INF/APPLICATION.JNLP

       where APPLICATION.JNLP is either a copy or a symlink to the
       client.jnlp file server by your web server to launch the client,
       and

       console/JNLP-INF/APPLICATION.JNLP

       as a copy or symlink to the console.jnlp file used to launch
       the admin client.

       If you don't want to sign your JNLP launch files, just don't
       provide the client and console directories.

       ============================================================ -->

  <!-- Are we going to sign our jars?  (Say yes!) -->
  <property name="do.signjars" value="true"/>

  <property file="${build.crypto}/crypto.properties"/>

  <!-- If we are required to generate our own, unsigned private server
       key, let's make it valid for 10 years -->
  <property name="gen_key.days_valid" value="3650"/>

  <!-- If we are required to generate our own, unsigned private server
       key, give it the following name. -->
  <property name="gen_key.dname" value="cn=Ganymede Server,ou=Your Domain Here,c=Your Country Here"/>

  <!--
      We're going to encode the DOMAIN name of the build host into the
      client and admin console jar files, to let Java7u25 and later
      know not to let people run the jar files we are building here
      from some random foreign system.

      See

      http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/no_redeploy.html

      for details. -->
  <hostinfo/>

  <!-- Include the JarBundler task so that we can do Mac OS X specific
  build packaging. -->

  <taskdef name="jarbundler"
           classpath="${lib.dir}/jarbundler-2.1.0.jar"
           classname="net.sourceforge.jarbundler.JarBundler"/>

  <path id="classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jython.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- === Targets ahoy ===  -->

  <target name="help">
    <echo>ant rules
---------

build         - Prepares build tree and compiles everything
jars          - Produces the jar files for the server, client, and admin console
javadoc       - Builds the java doc tree
dist          - Does build, jars, and javadoc, without cleaning

validate      - Cross-checks all Ganymede .java source files against
                message localization bundles.  This depends on the use of a specific
                pattern for doing string localizations.

                See verification/resource_validator.pl and
                verification/translation_validator.pl for details.

genkeys       - Generates a new self-signed private/public key pair and cert for
                authenticating the server when using SSL sockets for client/server
		communications.

regenkeys     - Deletes and regenerates SSL private key for the server and
                public certificate for the client.  Be careful!  When you delete
                or regenerate your SSL key material, you will have to be sure and
                update your server and client jar files at the same time.

clean         - Cleans the build class tree

javadoc_clean - Cleans the java doc tree

dist_clean    - Cleans the directories at the top distribution level

veryclean     - Does all of dist_clean, javadoc_clean, clean

cleankeys     - Deletes the existing SSL key and cert material.  Be careful!  When
                you delete or regenerate your SSL key material, you will have to be
                sure and update your server and client jar files at the same time.

                Because this is such an irretrievable operation, you have to run this
                rule by hand, the other clean rules won't do this for you.

total         - Complete strip and rebuild
</echo>
  </target>


  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.doc}"/>
    <mkdir dir="${build.crypto}"/>
    <mkdir dir="${build.crypto}/arlut/csd/ganymede/common"/>
    <tstamp/>
    <echo message="${TSTAMP}"/>
  </target>


  <target name="build" depends="main">
    <echo>
Class files rebuilt.  Don't forget to run 'ant jars' if you want to
refresh the jar files.
</echo>
  </target>


  <target name="main" depends="prepare">
    <!-- main is intended as an unadvertised target, so that we can provide
         the user with the 'don't forget the jars' advice if they run ant
         or ant build. -->

    <mkdir dir="${build.classes}"/>

    <echo>Building, java.home is ${java.home}
</echo>

    <javac destdir="${build.classes}"
           debug="${debug.flag}"
           debuglevel="${debug.level}"
           encoding="UTF-8"
           target="6"
           source="6"
           deprecation="on"
           includeantruntime="false"
           srcdir="${src.dir}">
<!--
  We have lots and lots of pre-Java 5 Vector usage, but if you want to turn on linting..

      <compilerarg value="-Xlint:unchecked"/>
-->
      <src path="${src.dir}"/>
      <classpath refid="classpath"/>
    </javac>

    <!-- Compile all of our Stub classes -->

    <!-- (We shouldn't need to do this since Java 5, but at least some
         versions of Debian running OpenJDK seem to have problems
         allowing the Ganymede client running via Javaws to
         auto-generate the stub proxy classes.

         To go along with that, the old-school pre-generated Stub
         classes seem to require the pre-generated Skel classes to be
         present on the server.

         Debian bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=605458
         IcedTea bug: http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=568

         Ideally we should be able to get rid of this <rmic> element
         entirely, but we're keeping it until the above bugs are dealt
         with and trickle down to our users.

         28 March 2013 -->

    <rmic base="${build.classes}">
      <include name="arlut/csd/ganymede/server/GanymedeServer.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeSession.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeXMLSession.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeAdmin.class"/>
      <include name="arlut/csd/ganymede/server/DBSchemaEdit.class"/>
      <include name="arlut/csd/ganymede/server/DBBaseCategory.class"/>
      <include name="arlut/csd/ganymede/server/DBObjectBase.class"/>
      <include name="arlut/csd/ganymede/server/DBObjectBaseField.class"/>
      <include name="arlut/csd/ganymede/server/DBNameSpace.class"/>
      <include name="arlut/csd/ganymede/server/DBObject.class"/>
      <include name="arlut/csd/ganymede/server/DBField.class"/>

      <include name="arlut/csd/ganymede/server/PermissionMatrixDBField.class"/>
      <include name="arlut/csd/ganymede/server/InvidDBField.class"/>
      <include name="arlut/csd/ganymede/server/StringDBField.class"/>
      <include name="arlut/csd/ganymede/server/BooleanDBField.class"/>
      <include name="arlut/csd/ganymede/server/DateDBField.class"/>
      <include name="arlut/csd/ganymede/server/NumericDBField.class"/>
      <include name="arlut/csd/ganymede/server/PasswordDBField.class"/>
      <include name="arlut/csd/ganymede/server/IPDBField.class"/>
      <include name="arlut/csd/ganymede/server/FloatDBField.class"/>
      <include name="arlut/csd/ganymede/server/FieldOptionDBField.class"/>

      <include name="arlut/csd/ganymede/server/GanymediatorWizard.class"/>

      <include name="arlut/csd/ganymede/server/serverAdminAsyncResponder.class"/>
      <include name="arlut/csd/ganymede/server/serverClientAsyncResponder.class"/>

      <include name="arlut/csd/ganymede/server/XMLTransmitter.class"/>
    </rmic>
  </target>

  <target name ="validate">
    <echo>Validating default localization resources
    </echo>
    <exec executable="verification/resource_validator.pl" failonerror="true">
      <arg file="."/>
    </exec>
    <exec executable="verification/translation_validator.pl" failonerror="true">
      <arg file="."/>
    </exec>
  </target>

  <!-- I'm always thinking validate is verify, so let's add a verify
       target as an alias, too. - Jon -->

  <target name="verify" depends="validate"/>

  <target name="jars" depends="main, genkeys">

    <propertyfile file="${resources.dir}/arlut/csd/ganymede/common/build.properties" comment="Generated by Ant in the Ganymede 'jars' task.">
      <entry key="build_date" type="date" value="now" pattern="yyyy-MM-dd'T'HH:mm:ssz"/>
      <entry key="build_jvm" value="${ant.java.version}"/>
      <entry key="build_host" value="${NAME}.${DOMAIN}"/>

      <!-- The following two entries must be customized for your deployment.

           If your ganymede.jar and ganymedeAdmin.jar files are signed
           with a recognizable cert authority and the build process is
           modified to include the launching jnlp file, maybe this
           won't work..

           All of this got a lot harder with Java 7u45, so we have to sneak
           these properties into the jar file itself.  Jon -->

      <entry key="ganymede.serverhost" value="ganymede-server.arlut.utexas.edu"/>
      <entry key="ganymede.registryPort" value="1099"/>
    </propertyfile>


    <!-- Copy over any jars used in the build -->
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}"/>
    </copy>

    <!-- Build the server jar file -->
    <jar jarfile="${build.lib}/ganymedeServer.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/crypto/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/listHandle.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="com/jclark/**/*.class"/>
      <fileset dir="${build.classes}" includes="Qsmtp/**/*.class"/>
      <fileset dir="${build.classes}" includes="jcrypt/**/*.class"/>
      <fileset dir="${build.classes}" includes="md5/**/*.class"/>
      <fileset dir="${build.classes}" includes="org/mindrot/**/*.class"/>
      <fileset dir="${build.classes}" includes="org/solinger/**/*.class"/>
      <fileset dir="${build.classes}" includes="gnu/trove/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>

      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/server/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>
      <fileset dir="${resources.dir}" includes="org/solinger/**"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/server_ssl_key.jks"/>
      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client_ssl_cert.jks"/>

      <zipfileset src="${lib.dir}/antlr-3.5.1-runtime.jar"/>
    </jar>

    <!-- Build the client jar file -->
    <jar jarfile="${build.lib}/ganymede.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="apple/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JCalendar/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTable/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTree/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*_Stub.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/password/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/arl_phone/*.class"/>
      <fileset dir="${build.classes}" includes="com/jclark/**/*.class"/>
      <fileset dir="${build.classes}" includes="foxtrot/**/*.class"/>

      <fileset dir="${resources.dir}" includes="arlut/csd/JCalendar/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDataComponent/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDialog/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTable/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTree/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/client/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client_ssl_cert.jks"/>
      <fileset dir="${build.crypto}/client" erroronmissingdir="false" includes="JNLP-INF/APPLICATION.JNLP"/>

      <!-- Pull in a couple of jar files that we'll use to provide
           better GUI support on Mac. -->

      <zipfileset src="${lib.dir}/mac_widgets.jar"/>
      <zipfileset src="${lib.dir}/forms-1.3.0pre4.jar"/>

      <!-- add in a few extra for use w new calendar popup widget. James -->

      <zipfileset src="${lib.dir}/swingx-core-1.6.2.jar"/>

      <!-- Manifest attributes to satisfy a couple of security checks
           that Oracle added in Java 7u25. -->

      <manifest>
	<attribute name="Permissions" value="all-permissions"/>
	<attribute name="Codebase" value="*.${DOMAIN}"/>
	<attribute name="Application-Name" value="Ganymede Network Management"/>
      </manifest>
    </jar>

    <!-- Build the admin jar file -->
    <jar jarfile="${build.lib}/ganymedeAdmin.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="apple/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTable/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTree/**/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/admin/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*_Stub.class"/>

      <!-- Ugh, we need the server-side GanymedeScheduler included, since the scheduleHandle
           that we can transmit from the server to the admin console includes a GanymedeScheduler
           reference variable. -->

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/GanymedeScheduler.class"/>

      <fileset dir="${resources.dir}" includes="arlut/csd/JCalendar/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDataComponent/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDialog/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTable/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTree/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/admin/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>

      <fileset dir="${build.classes}" includes="foxtrot/**/*.class"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client_ssl_cert.jks"/>
      <fileset dir="${build.crypto}/console" erroronmissingdir="FALSE" includes="JNLP-INF/APPLICATION.JNLP"/>

      <!-- Pull in a couple of jar files that we'll use to provide
           better GUI support on Mac. -->

      <zipfileset src="${lib.dir}/mac_widgets.jar"/>
      <zipfileset src="${lib.dir}/forms-1.3.0pre4.jar"/>

      <!-- Manifest attributes to satisfy a couple of security checks
           that Oracle added in Java 7u25. -->

      <manifest>
	<attribute name="Permissions" value="all-permissions"/>
	<attribute name="Codebase" value="*.${DOMAIN}"/>
	<attribute name="Application-Name" value="Ganymede Network Management"/>
      </manifest>
    </jar>

    <antcall target="signjars"/>

    <!-- Copy over the newly created jars -->
    <copy todir="${dist.jars}">
      <fileset dir="${build.lib}" includes="*.jar"/>
    </copy>
  </target>


  <target name="signjars" if="do.signjars">
    <signjar alias="${jar_signing.keyalias}" storepass="${jar_signing.storepass}" keystore="${jar_signing.keystore}" keypass="${jar_signing.keypass}">
     <fileset dir="." includes="${build.lib}/ganymede.jar, ${build.lib}/ganymedeAdmin.jar"/>
    </signjar>
  </target>


  <target name="javadoc" depends="prepare,javadoc_clean">
    <mkdir dir="${build.doc}"/>
    <javadoc sourcepath="${src.dir}"
             packagenames="*"
             destdir="${build.doc}"
             author="true"
             version="true"
	     private="true"
	     additionalparam="-breakiterator"
             use="true">
             <classpath refid="classpath"/>
    </javadoc>

    <!-- Copy over the newly created docs -->
    <copy todir="${dist.doc}">
      <fileset dir="${build.doc}"/>
    </copy>
  </target>


  <target name="clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${build.classes}" includes="**/*"/>
      <fileset dir="${build.lib}" includes="*.jar"/>
      <fileset dir="${build.doc}" includes="**/*"/>
    </delete>
  </target>


  <target name="javadoc_clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${build.doc}" includes="**/*"/>
      <fileset dir="${dist.doc}" includes="**/*"/>
    </delete>
  </target>


  <target name="dist_clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${dist.jars}" includes="**/*"/>
      <fileset dir="${dist.doc}" includes="**/*"/>
    </delete>
  </target>


  <target name="veryclean" depends="javadoc_clean,clean,dist_clean"/>


  <target name="total" depends="veryclean,main,validate,jars,javadoc"/>


  <target name="dist" depends="main,validate,jars,javadoc"/>


  <target name="regenkeys" if="use.ssl" depends="cleankeys">
    <antcall target="genkeys"/>
  </target>


  <target name="cleankeys">
    <delete failonerror="false">
      <fileset dir="${build.crypto}/arlut/csd/ganymede/common" includes="*.jks"/>
    </delete>
  </target>


  <target name="genkeys" if="need.sslkeys" depends="prepare">
    <genkey alias="${server_ssl_key.keyalias}" keystore="${server_ssl_key.keystore}" storepass="${server_ssl_key.storepass}"
            dname="${gen_key.dname}" validity="${gen_key.days_valid}" verbose="false"/>
    <exec dir="." executable="${java.home}${file.separator}bin${file.separator}keytool">
      <arg line= "-export -v -keystore ${server_ssl_key.keystore} -alias ${server_ssl_key.keyalias} -file ${client_ssl_cert.keystore}.tmp -storepass ${server_ssl_key.storepass}"/>
    </exec>
    <exec dir="." executable="${java.home}${file.separator}bin${file.separator}keytool">
      <arg line="-import -v -alias ${server_ssl_key.keyalias} -noprompt -file ${client_ssl_cert.keystore}.tmp -keystore ${client_ssl_cert.keystore} -storepass ${client_ssl_cert.storepass}"/>
    </exec>
    <delete failonerror="false"><fileset dir="." includes="${client_ssl_cert.keystore}.tmp"/></delete>
    <echo>

Fresh self-signed SSL keys have been generated.  Be sure and run 'ant
jars' to rebuild the jar files.  Remember that the server, admin, and
client jar files must all be updated at one time in order to keep the
SSL keys and certificates matched.

Warning: jars signed with self-signed certificates are not valid for
use with Java Web Start and/or in an applet.  Modern Java environments
will either give a scary warning or prevent execution of such jars
altogether.

</echo>
  </target>
</project>
