<!--
    Ganymede Ant build file

    Deepak Giridharagopal, deepak@arlut.utexas.edu
-->

<project name="ganymede" default="build" basedir=".">

  <!-- 
    Project-wide settings. All directories are relative to the project
    directories.
  -->

  <property name="src.dir" value="ganymede"/>
  <property name="jython.dir" value="jython"/>
  <property name="lib.dir" value="lib"/>
  <property name="resources.dir" value="resources"/>

  <!-- Build directories -->
  <property name="build.dir" value="build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.doc" value="${build.dir}/doc"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.crypto" value="${build.dir}/crypto"/>

  <!-- Dist directories -->
  <property name="dist.jars" value="../jars"/>
  <property name="dist.doc" value="../doc/javadoc"/>

  <!-- Global settings -->
  <property name="debug.flag" value="true"/>
  <property name="debug.level" value="source,lines,vars"/>

  <!-- Global properties for javac -->
  <property name="build.compiler" value="modern"/>

  <!-- Crypto Key Properties -->
  <property name="use.ssl" value="true"/>
  <property name="do.signjars" value="true"/>


  <!-- This keystore passphrase must match that in arlut.csd.ganymede.common.RMISSLServerSocketFactory -->
  <property name="priv_key.storepass" value="ganypassphrase"/>

  <!-- Let's make the private server key valid for 10 years -->
  <property name="priv_key.days_valid" value="3650"/>

  <!-- This filename should not be changed -->
  <property name="priv_key.keystore" value="${build.crypto}/arlut/csd/ganymede/common/GanymedeSSLServerKeys"/>
  <property name="priv_key.alias" value="GanymedeServerKey"/>
  <property name="priv_key.dname" value="cn=Ganymede Server,ou=Your Domain Here,c=Your Country Here"/>
  <property name="pubcert.truststore" value="${build.crypto}/arlut/csd/ganymede/common/client.truststore"/>
  <property name="pubcert.storepass" value="gclientpassphrase"/>

  <!--
      We're going to encode the DOMAIN name of the build host into
      the client and admin console jar files, to let Java7u25 and
      later know not to let people run the jar files we are building
      here from some random foreign system.

      See

      http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/no_redeploy.html

      for details.
  -->

  <hostinfo/>

  <condition property="sslkeys.notgenerated">
    <not>
      <and>
        <available file="${priv_key.keystore}"/>
        <available file="${pubcert.truststore}"/>
      </and>
    </not>
  </condition>

  <condition property="need.sslkeys">
    <and>
      <equals arg1="${sslkeys.notgenerated}" arg2="true"/>
      <equals arg1="${use.ssl}" arg2="true"/>
    </and>
  </condition>

  <!-- Include the JarBundler task so that we can do Mac OS X specific
  build packaging. -->

  <taskdef name="jarbundler"
           classpath="${lib.dir}/jarbundler-2.1.0.jar"
           classname="net.sourceforge.jarbundler.JarBundler"/>

  <path id="classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jython.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- === Targets ahoy ===  -->

  <target name="help">
    <echo>ant rules
---------

build         - Prepares build tree and compiles everything
jars          - Produces the jar files for the server, client, and admin console
javadoc       - Builds the java doc tree
dist          - Does build, jars, and javadoc, without cleaning

validate      - Cross-checks all Ganymede .java source files against
                message localization bundles.  This depends on the use of a specific
                pattern for doing string localizations.

                See verification/resource_validator.pl and
                verification/translation_validator.pl for details.

genkeys       - Generates a new private/public key pair and cert for authenticating
                the server when using SSL sockets for client/server communications.

regenkeys     - Deletes and regenerates SSL private key for the server and
                public certificate for the client.  Be careful!  When you delete
                or regenerate your SSL key material, you will have to be sure and
                update your server and client jar files at the same time.

clean         - Cleans the build class tree

javadoc_clean - Cleans the java doc tree

dist_clean    - Cleans the directories at the top distribution level

veryclean     - Does all of dist_clean, javadoc_clean, clean

cleankeys     - Deletes the existing SSL key and cert material.  Be careful!  When
                you delete or regenerate your SSL key material, you will have to be
                sure and update your server and client jar files at the same time.

                Because this is such an irretrievable operation, you have to run this
                rule by hand, the other clean rules won't do this for you.

total         - Complete strip and rebuild
</echo>
  </target>


  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.doc}"/>
    <mkdir dir="${build.crypto}"/>
    <mkdir dir="${build.crypto}/arlut/csd/ganymede/common"/>
    <tstamp/>
    <echo message="${TSTAMP}"/>
  </target>


  <target name="build" depends="main">
    <echo>
Class files rebuilt.  Don't forget to run 'ant jars' if you want to
refresh the jar files.
</echo>
  </target>


  <target name="main" depends="prepare">
    <!-- main is intended as an unadvertised target, so that we can provide
         the user with the 'don't forget the jars' advice if they run ant
         or ant build. -->

    <mkdir dir="${build.classes}"/>

    <echo>Building, java.home is ${java.home}
</echo>
    
    <javac destdir="${build.classes}"
           debug="${debug.flag}"
           debuglevel="${debug.level}"
           encoding="UTF-8"
           target="6"
           source="6"
           deprecation="on"
           includeantruntime="false"
           srcdir="${src.dir}">
<!--
  We have lots and lots of pre-Java 5 Vector usage, but if you want to turn on linting..

      <compilerarg value="-Xlint:unchecked"/>
-->
      <src path="${src.dir}"/>
      <classpath refid="classpath"/>
    </javac>

    <!-- Compile all of our Stub classes -->

    <!-- (We shouldn't need to do this since Java 5, but at least some
         versions of Debian running OpenJDK seem to have problems
         allowing the Ganymede client running via Javaws to
         auto-generate the stub proxy classes.

         To go along with that, the old-school pre-generated Stub
         classes seem to require the pre-generated Skel classes to be
         present on the server.

         Debian bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=605458
         IcedTea bug: http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=568

         Ideally we should be able to get rid of this <rmic> element
         entirely, but we're keeping it until the above bugs are dealt
         with and trickle down to our users.

         28 March 2013 -->

    <rmic base="${build.classes}">
      <include name="arlut/csd/ganymede/server/GanymedeServer.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeSession.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeXMLSession.class"/>
      <include name="arlut/csd/ganymede/server/GanymedeAdmin.class"/>
      <include name="arlut/csd/ganymede/server/DBSchemaEdit.class"/>
      <include name="arlut/csd/ganymede/server/DBBaseCategory.class"/>
      <include name="arlut/csd/ganymede/server/DBObjectBase.class"/>
      <include name="arlut/csd/ganymede/server/DBObjectBaseField.class"/>
      <include name="arlut/csd/ganymede/server/DBNameSpace.class"/>
      <include name="arlut/csd/ganymede/server/DBObject.class"/>
      <include name="arlut/csd/ganymede/server/DBField.class"/>

      <include name="arlut/csd/ganymede/server/PermissionMatrixDBField.class"/>
      <include name="arlut/csd/ganymede/server/InvidDBField.class"/>
      <include name="arlut/csd/ganymede/server/StringDBField.class"/>
      <include name="arlut/csd/ganymede/server/BooleanDBField.class"/>
      <include name="arlut/csd/ganymede/server/DateDBField.class"/>
      <include name="arlut/csd/ganymede/server/NumericDBField.class"/>
      <include name="arlut/csd/ganymede/server/PasswordDBField.class"/>
      <include name="arlut/csd/ganymede/server/IPDBField.class"/>
      <include name="arlut/csd/ganymede/server/FloatDBField.class"/>
      <include name="arlut/csd/ganymede/server/FieldOptionDBField.class"/>

      <include name="arlut/csd/ganymede/server/GanymediatorWizard.class"/>

      <include name="arlut/csd/ganymede/server/serverAdminAsyncResponder.class"/>
      <include name="arlut/csd/ganymede/server/serverClientAsyncResponder.class"/>
      
      <include name="arlut/csd/ganymede/server/XMLTransmitter.class"/>
    </rmic>
  </target>

  <target name ="validate">
    <echo>Validating default localization resources
    </echo>
    <exec executable="verification/resource_validator.pl" failonerror="true">
      <arg file="."/>
    </exec>
    <exec executable="verification/translation_validator.pl" failonerror="true">
      <arg file="."/>
    </exec>
  </target>

  <!-- I'm always thinking validate is verify, so let's add a verify
       target as an alias, too. - Jon -->

  <target name="verify" depends="validate"/>

  <target name="jars" depends="main, genkeys">

    <propertyfile file="${resources.dir}/arlut/csd/ganymede/common/build.properties" comment="Generated by Ant in the Ganymede 'jars' task.">
      <entry key="build_date" type="date" value="now" pattern="yyyy-MM-dd'T'HH:mm:ssz"/>
      <entry key="build_jvm" value="${ant.java.version}"/>
      <entry key="build_host" value="${NAME}.${DOMAIN}"/>

      <!-- The following two entries must be customized for your deployment.

           If your ganymede.jar and ganymedeAdmin.jar files are signed
           with a recognizable cert authority and the build process is
           modified to include the launching jnlp file, maybe this
           won't work..

           All of this got a lot harder with Java 7u45, so we have to sneak
           these properties into the jar file itself.  Jon -->

      <entry key="ganymede.serverhost" value="ganymede-server.arlut.utexas.edu"/>
      <entry key="ganymede.registryPort" value="1099"/>
    </propertyfile>


    <!-- Copy over any jars used in the build -->
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}"/>
    </copy>

    <!-- Build the server jar file -->
    <jar jarfile="${build.lib}/ganymedeServer.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/crypto/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/listHandle.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="com/jclark/**/*.class"/> 
      <fileset dir="${build.classes}" includes="Qsmtp/**/*.class"/>
      <fileset dir="${build.classes}" includes="jcrypt/**/*.class"/>
      <fileset dir="${build.classes}" includes="md5/**/*.class"/>
      <fileset dir="${build.classes}" includes="org/mindrot/**/*.class"/>
      <fileset dir="${build.classes}" includes="org/solinger/**/*.class"/>
      <fileset dir="${build.classes}" includes="gnu/trove/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>
      
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/server/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>
      <fileset dir="${resources.dir}" includes="org/solinger/**"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/GanymedeSSLServerKeys"/>
      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client.truststore"/>

      <zipfileset src="${lib.dir}/antlr-runtime-3.2.jar"/>
    </jar>

    <!-- Build the client jar file -->
    <jar jarfile="${build.lib}/ganymede.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="apple/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JCalendar/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTable/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTree/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*_Stub.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/password/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/client/arl_phone/*.class"/>
      <fileset dir="${build.classes}" includes="com/jclark/**/*.class"/>
      <fileset dir="${build.classes}" includes="foxtrot/**/*.class"/>

      <fileset dir="${resources.dir}" includes="arlut/csd/JCalendar/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDataComponent/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDialog/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTable/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTree/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/client/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client.truststore"/>

      <!-- Pull in a couple of jar files that we'll use to provide
           better GUI support on Mac. -->

      <zipfileset src="${lib.dir}/mac_widgets.jar"/>
      <zipfileset src="${lib.dir}/forms-1.3.0pre4.jar"/>

      <!-- add in a few extra for use w new calendar popup widget. James -->
      
      <zipfileset src="${lib.dir}/swingx-core-1.6.2.jar"/>

      <!-- Manifest attributes to satisfy a couple of security checks
           that Oracle added in Java 7u25. -->

      <manifest>
	<attribute name="Permissions" value="all-permissions"/>
	<attribute name="Codebase" value="*.${DOMAIN}"/>
	<attribute name="Application-Name" value="Ganymede Network Management"/>
      </manifest>
    </jar>

    <!-- Build the admin jar file -->
    <jar jarfile="${build.lib}/ganymedeAdmin.jar" duplicate="preserve">
      <fileset dir="${build.classes}" includes="apple/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/Util/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDataComponent/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JDialog/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTable/**/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/JTree/**/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/admin/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/common/*.class"/>
      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/rmi/*.class"/>

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/*_Stub.class"/>

      <!-- Ugh, we need the server-side GanymedeScheduler included, since the scheduleHandle
           that we can transmit from the server to the admin console includes a GanymedeScheduler
           reference variable. -->

      <fileset dir="${build.classes}" includes="arlut/csd/ganymede/server/GanymedeScheduler.class"/>

      <fileset dir="${resources.dir}" includes="arlut/csd/JCalendar/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDataComponent/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JDialog/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTable/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/JTree/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/admin/**"/>
      <fileset dir="${resources.dir}" includes="arlut/csd/ganymede/common/**"/>

      <fileset dir="${build.classes}" includes="foxtrot/**/*.class"/>

      <fileset dir="${build.crypto}" includes="arlut/csd/ganymede/common/client.truststore"/>

      <!-- Pull in a couple of jar files that we'll use to provide
           better GUI support on Mac. -->

      <zipfileset src="${lib.dir}/mac_widgets.jar"/>
      <zipfileset src="${lib.dir}/forms-1.3.0pre4.jar"/>

      <!-- Manifest attributes to satisfy a couple of security checks
           that Oracle added in Java 7u25. -->

      <manifest>
	<attribute name="Permissions" value="all-permissions"/>
	<attribute name="Codebase" value="*.${DOMAIN}"/>
	<attribute name="Application-Name" value="Ganymede Network Management"/>
      </manifest>
    </jar>

    <antcall target="signjars"/>
    
    <!-- Copy over the newly created jars -->
    <copy todir="${dist.jars}">
      <fileset dir="${build.lib}" includes="*.jar"/>
    </copy>
  </target>


  <target name="signjars" if="do.signjars">
    <signjar alias="${priv_key.alias}" storepass="${priv_key.storepass}" keystore="${priv_key.keystore}" keypass="${priv_key.storepass}">
     <fileset dir="." includes="${build.lib}/ganymede.jar, ${build.lib}/ganymedeAdmin.jar"/>
    </signjar>
  </target>


  <target name="javadoc" depends="prepare,javadoc_clean">
    <mkdir dir="${build.doc}"/>
    <javadoc sourcepath="${src.dir}"
             packagenames="*"
             destdir="${build.doc}"
             author="true"
             version="true"
	     private="true"
	     additionalparam="-breakiterator"
             use="true">
             <classpath refid="classpath"/>
    </javadoc>

    <!-- Copy over the newly created docs -->
    <copy todir="${dist.doc}">
      <fileset dir="${build.doc}"/>
    </copy>
  </target>
  
  
  <target name="clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${build.classes}" includes="**/*"/>
      <fileset dir="${build.lib}" includes="*.jar"/>
      <fileset dir="${build.doc}" includes="**/*"/>
    </delete>
  </target>

  
  <target name="javadoc_clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${build.doc}" includes="**/*"/>
      <fileset dir="${dist.doc}" includes="**/*"/>
    </delete>
  </target>


  <target name="dist_clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${dist.jars}" includes="**/*"/>
      <fileset dir="${dist.doc}" includes="**/*"/>
    </delete>
  </target>

  
  <target name="veryclean" depends="javadoc_clean,clean,dist_clean"/>
  

  <target name="total" depends="veryclean,main,validate,jars,javadoc"/>


  <target name="dist" depends="main,validate,jars,javadoc"/>


  <target name="regenkeys" if="use.ssl" depends="cleankeys">
    <antcall target="genkeys"/>
  </target>


  <target name="cleankeys">
    <delete failonerror="false">
      <fileset dir="${build.crypto}" includes="**/*"/>
    </delete>
  </target>


  <target name="genkeys" if="need.sslkeys" depends="prepare">
    <genkey alias="${priv_key.alias}" keystore="${priv_key.keystore}" storepass="${priv_key.storepass}"
            dname="${priv_key.dname}" validity="${priv_key.days_valid}" verbose="false"/>
    <exec dir="." executable="${java.home}${file.separator}bin${file.separator}keytool">
      <arg line= "-export -v -keystore ${priv_key.keystore} -alias ${priv_key.alias} -file ${pubcert.truststore}.tmp -storepass ${priv_key.storepass}"/>
    </exec>
    <exec dir="." executable="${java.home}${file.separator}bin${file.separator}keytool">
      <arg line="-import -v -alias ${priv_key.alias} -noprompt -file ${pubcert.truststore}.tmp -keystore ${pubcert.truststore} -storepass ${pubcert.storepass}"/>
    </exec>
    <delete failonerror="false"><fileset dir="." includes="${pubcert.truststore}.tmp"/></delete>
    <echo>
 
Fresh SSL keys have been generated.  Be sure and run 'ant jars' to rebuild the jar files.  Remember
that the server, admin, and client jar files must all be updated at one time in order to keep
the SSL keys and certificates matched.
 
</echo>
  </target>
</project>
